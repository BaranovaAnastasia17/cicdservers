name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt

    - name: Start PostgreSQL container
      run: |
        podman run -d --name test_db -e POSTGRES_USER=kubsu -e POSTGRES_PASSWORD=kubsu -e POSTGRES_DB=kubsu -p 5432:5432 postgres:13

    - name: Wait for PostgreSQL to start
      run: |
        until podman exec test_db pg_isready -U kubsu; do
          sleep 1
        done

    - name: Setup database
      run: |
        podman cp setup_db.sql test_db:/setup_db.sql
        podman exec test_db psql -U kubsu -d kubsu -f /setup_db.sql

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 app --max-line-length=88

    - name: Format code with black
      run: |
        pip install black
        black app

    - name: Test with pytest
      env:
        DB_HOST: localhost
        DB_NAME: kubsu
        DB_USER: kubsu
        DB_PASSWORD: kubsu
        DB_PORT: 5432
      run: |
        pip install pytest pytest-flask
        pytest

    - name: Build Docker image
      run: |
        podman build -t my_flask_app .

    - name: Push Docker image
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | podman login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        podman tag my_flask_app ${{ secrets.DOCKER_USERNAME }}/my_flask_app:latest
        podman push ${{ secrets.DOCKER_USERNAME }}/my_flask_app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Stop existing container
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "podman stop flask_app || true"

    - name: Remove existing container
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "podman rm flask_app || true"

    - name: Pull new Docker image
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "podman pull ${{ secrets.DOCKER_USERNAME }}/my_flask_app:latest"

    - name: Run new container
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "podman run -d --name flask_app --network='host' -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/my_flask_app:latest"
